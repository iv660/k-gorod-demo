<?php

/* @var $this yii\web\View */
use yii\helpers\Url;

$this->title = Yii::t('app', 'My Yii Application Backend');
?>
<div class="site-index">
    <div class="body-content">
        <h1>Обзор функций приложения</h1>
        
        <p>Данное приложение содержит каталог книг, заполненный демонстрационными данными.</p>
        
        <p>Первые три книги в каталоге содержат главы и предназначены для проверки бэк-энда. Остальные книги сформированы автоматически, не имеют глав и предназначены для тестирования разбивки на страницы.</p>
        
        <p>Добавление и удаление книг и глав отключены в соответствии с техзаданием.</p>

        <p>При разработке данного приложения использованы следующие возможности фреймворка Yii2.</p>
        
        <ul>
            <li><strong>Конфигурационные файлы</strong> для настройки всех параметров приложения. Конфиденциальные данные, такие как данные учетных записей, размещены в файлах <code>config/*-local.php</code>, не входящих в пакет поставки приложения. Настройте данные параметры самостоятельно в соответствии с параметрами вашей среды.</li>
            <li><strong>MVC</strong>. Все компоненты приложения реализованы в соответствии с принятой в Yii2 реализацией шаблона проектирования MVC.</li>
            <li><strong>ActiveForm</strong> для работы с формами.</li>
            <li><strong>Валидаторы</strong>. Для проверки данных, вводимых пользователем, используются встроенные валидаторы.</li>
            <li><strong>Миграции</strong>. Для построения схемы данных используется стандартный механизм миграций Yii2. После установки и настойки пакета выполните команду <code>yii migrate</code> в консоли. При выполнении миграций также устанавливаются демонстрационные данные. Все миграции поддерживают откаты (<code>yii migrate/down</code>).</li>
            <li><strong>Префиксы таблиц БД</strong>. В приложении поддерживается возможность задавать префиксы таблиц базы данных. Для этой цели используется параметр <code>tablePrefix</code> компонента <code>db</code>. Механизм префиксов позволяет избежать конфликтов при использовании одной базы данных для работы нескольких различных приложений.</li>
            <li><strong>Совместимость БД</strong>. Приложение обеспечивает возможность работы с различными типами серверов баз данных. Проверено на совместимость с MySQL и PostgreSQL.</li>
            <li><strong>Локализация</strong> (i18n) для всех элементов пользовательского интерфейса, реализованных в ходе выполнения этого проекта (локализация стандартных элементов интерфейса, входящих в стандартный пакет установки Yii2, а также статичных документов, не производилась).</li>
            <li><strong>URL</strong>. Для формирования URL на основе алиасов использовался стандартный хелпер.</li>
            <li><strong>Gii</strong> для автоматизированного формирования кода приложения.</li>
            <li><strong>Автоматизация</strong>. Для формирования языковых файлов и миграций использовались встроенные в Yii2 средства автоматизации (<code>yii migrate/create</code>, <code>yii message</code>).</li>
            <li><strong>REST API</strong>. Выполнен в виде отдельного приложения <code>api</code>. Используется для динамического формирования списка книг (см. ниже). Конечная точка API: <code>https://your_api_server/api/v1/books</code></li>
            <li><strong>ReactJS</strong>. Формирование списка книг с навигацией по страницам на <a href="../../frontend/web">фронт-энде приложения</a>.</li>
        </ul>

    <div class="jumbotron">
        <p><a class="btn btn-lg btn-success" href="<?= Url::to(['/book']) ?>">К панели управления</a></p>
    </div>

    </div>
</div>
